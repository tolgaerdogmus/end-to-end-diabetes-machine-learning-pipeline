{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"\n# End to End Diabetes Machine Learning Pipeline\n\n* [Exploratory Data Analysis](#ExploratoryDataAnalysis)\n    * [EDA Functions](#edafuncs)\n        * [check_df](#check_df)\n        * [grab_col_names](#grab_col_names)\n        * [cat_summary](#cat_summary)\n        * [num_summary](#num_summary)\n        * [target_summary_with_cat](#target_summary_with_cat)\n        * [target_summary_with_num](#target_summary_with_num)\n        * [correlation_matrix](#correlation_matrix)\n* [Data Preproccessing & Feature Engineering](#DataPrepFeatureEngineering)\n    * [Data Prep & Feature eng Functions](#dpfefuncs)\n        * [check_outlier](#check_outlier)\n        * [replace_with_thresholds](#replace_with_thresholds)\n        * [one_hot_encoder](#one_hot_encoder)        \n        * [diabetes_data_prep](#diabetes_data_prep)\n    * [Standardization](#standardization)\n* [Base Models](#BaseModels)\n* [Automated Hyperparameter Optimization](#AutomatedHyperparameterOptimization)\n    * [Section 4.1](#section_4_1)\n* [Stacking & Ensemble Learning](#StackingEnsembleLearning)\n    * [Section 5.1](#section_5_1)\n* [Prediction for a New Observation](#PredictionForANewObservation)\n    * [Section 6.1](#section_6_1)\n* [Pipeline Main Function](#PipelineMainFunction)\n    * [Section 7.1](#section_7_1)","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport joblib\nfrom matplotlib import pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-13T20:06:39.834754Z","iopub.execute_input":"2024-07-13T20:06:39.835788Z","iopub.status.idle":"2024-07-13T20:06:39.843612Z","shell.execute_reply.started":"2024-07-13T20:06:39.835751Z","shell.execute_reply":"2024-07-13T20:06:39.842457Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.845583Z","iopub.execute_input":"2024-07-13T20:06:39.846104Z","iopub.status.idle":"2024-07-13T20:06:39.857563Z","shell.execute_reply.started":"2024-07-13T20:06:39.846059Z","shell.execute_reply":"2024-07-13T20:06:39.856477Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"## <a class=\"anchor\" id=\"ExploratoryDataAnalysis\">Exploratory Data Analysis</a>","metadata":{}},{"cell_type":"markdown","source":"####  <a class=\"anchor\" id=\"edafuncs\">EDA Functions</a>","metadata":{}},{"cell_type":"code","source":"def check_df(dataframe, head=5):  \n    print(\"##################### Shape #####################\")  \n    print(dataframe.shape)  \n  \n    print(\"##################### Types #####################\")  \n    print(dataframe.dtypes)  \n  \n    print(\"##################### Duplicated Values #####################\")  \n    print(dataframe.duplicated().sum())  \n  \n    print(\"##################### Number of Unique Values #####################\")  \n    print(df.nunique())  \n  \n    print(\"##################### Head #####################\")  \n    print(dataframe.head(head))  \n  \n    print(\"##################### Tail #####################\")  \n    print(dataframe.tail(head))  \n  \n    print(\"##################### NA #####################\")  \n    print(dataframe.isnull().sum())  \n  \n    print(\"##################### Quantiles #####################\")  \n    numeric_cols = dataframe.select_dtypes(include=['number'])  \n    print(numeric_cols.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.858928Z","iopub.execute_input":"2024-07-13T20:06:39.859314Z","iopub.status.idle":"2024-07-13T20:06:39.869616Z","shell.execute_reply.started":"2024-07-13T20:06:39.859278Z","shell.execute_reply":"2024-07-13T20:06:39.868611Z"},"_kg_hide-input":false,"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f\"cat_cols: {len(cat_cols)}\")\n    print(f\"num_cols: {len(num_cols)}\")\n    print(f\"cat_but_car: {len(cat_but_car)}\")\n    print(f\"num_but_cat: {len(num_but_cat)}\")\n    \n    return cat_cols, num_cols, cat_but_car","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.872094Z","iopub.execute_input":"2024-07-13T20:06:39.872462Z","iopub.status.idle":"2024-07-13T20:06:39.888366Z","shell.execute_reply.started":"2024-07-13T20:06:39.872429Z","shell.execute_reply":"2024-07-13T20:06:39.887249Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"def cat_summary(dataframe, col_name, plot=False):  \n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),  \n                        \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))  \n    print(\"##########################################\")  \n    if plot:  \n        sns.countplot(x=dataframe[col_name], data=dataframe)  \n        plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.889632Z","iopub.execute_input":"2024-07-13T20:06:39.889977Z","iopub.status.idle":"2024-07-13T20:06:39.899182Z","shell.execute_reply.started":"2024-07-13T20:06:39.889951Z","shell.execute_reply":"2024-07-13T20:06:39.897916Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def num_summary(dataframe, numerical_col, plot=False):  \n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]  \n    print(dataframe[numerical_col].describe(quantiles).T)  \n  \n    if plot:  \n        dataframe[numerical_col].hist(bins=20)  \n        plt.xlabel(numerical_col)  \n        plt.title(numerical_col)  \n        plt.show(block=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.900612Z","iopub.execute_input":"2024-07-13T20:06:39.901521Z","iopub.status.idle":"2024-07-13T20:06:39.917381Z","shell.execute_reply.started":"2024-07-13T20:06:39.901482Z","shell.execute_reply":"2024-07-13T20:06:39.916227Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# Function to summarize categorical variables by the target variable.  \ndef target_summary_with_cat(dataframe, target, categorical_col):  \n    print(categorical_col)  \n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean(),  \n                        \"Count\": dataframe[categorical_col].value_counts(),  \n                        \"Ratio\": 100 * dataframe[categorical_col].value_counts() / len(dataframe)}), end=\"\\n\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.918970Z","iopub.execute_input":"2024-07-13T20:06:39.919712Z","iopub.status.idle":"2024-07-13T20:06:39.928955Z","shell.execute_reply.started":"2024-07-13T20:06:39.919678Z","shell.execute_reply":"2024-07-13T20:06:39.927930Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def target_summary_with_num(dataframe, target, numerical_col):  \n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.930228Z","iopub.execute_input":"2024-07-13T20:06:39.930586Z","iopub.status.idle":"2024-07-13T20:06:39.942731Z","shell.execute_reply.started":"2024-07-13T20:06:39.930558Z","shell.execute_reply":"2024-07-13T20:06:39.941661Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def correlation_matrix(df, cols):  \n    fig = plt.gcf()  \n    fig.set_size_inches(10, 8)  \n    plt.xticks(fontsize=10)  \n    plt.yticks(fontsize=10)  \n    fig = sns.heatmap(df[cols].corr(), annot=True, linewidths=0.5, annot_kws={'size': 12}, linecolor='w', cmap='RdBu')  \n    plt.show(block=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:06:39.943834Z","iopub.execute_input":"2024-07-13T20:06:39.944169Z","iopub.status.idle":"2024-07-13T20:06:39.955652Z","shell.execute_reply.started":"2024-07-13T20:06:39.944142Z","shell.execute_reply":"2024-07-13T20:06:39.954474Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/docspot/datasets_228_482_diabetes.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:11:39.790315Z","iopub.execute_input":"2024-07-13T20:11:39.791172Z","iopub.status.idle":"2024-07-13T20:11:39.807878Z","shell.execute_reply.started":"2024-07-13T20:11:39.791136Z","shell.execute_reply":"2024-07-13T20:11:39.806865Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"check_df\">check_df</a>","metadata":{}},{"cell_type":"code","source":"check_df(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:11:49.214374Z","iopub.execute_input":"2024-07-13T20:11:49.215269Z","iopub.status.idle":"2024-07-13T20:11:49.257240Z","shell.execute_reply.started":"2024-07-13T20:11:49.215236Z","shell.execute_reply":"2024-07-13T20:11:49.255819Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"##################### Shape #####################\n(768, 9)\n##################### Types #####################\nPregnancies                   int64\nGlucose                       int64\nBloodPressure                 int64\nSkinThickness                 int64\nInsulin                       int64\nBMI                         float64\nDiabetesPedigreeFunction    float64\nAge                           int64\nOutcome                       int64\ndtype: object\n##################### Duplicated Values #####################\n0\n##################### Number of Unique Values #####################\nPregnancies                  17\nGlucose                     136\nBloodPressure                47\nSkinThickness                51\nInsulin                     186\nBMI                         248\nDiabetesPedigreeFunction    517\nAge                          52\nOutcome                       2\ndtype: int64\n##################### Head #####################\n   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  DiabetesPedigreeFunction  Age  Outcome\n0            6      148             72             35        0  33.6                     0.627   50        1\n1            1       85             66             29        0  26.6                     0.351   31        0\n2            8      183             64              0        0  23.3                     0.672   32        1\n3            1       89             66             23       94  28.1                     0.167   21        0\n4            0      137             40             35      168  43.1                     2.288   33        1\n##################### Tail #####################\n     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  DiabetesPedigreeFunction  Age  Outcome\n763           10      101             76             48      180  32.9                     0.171   63        0\n764            2      122             70             27        0  36.8                     0.340   27        0\n765            5      121             72             23      112  26.2                     0.245   30        0\n766            1      126             60              0        0  30.1                     0.349   47        1\n767            1       93             70             31        0  30.4                     0.315   23        0\n##################### NA #####################\nPregnancies                 0\nGlucose                     0\nBloodPressure               0\nSkinThickness               0\nInsulin                     0\nBMI                         0\nDiabetesPedigreeFunction    0\nAge                         0\nOutcome                     0\ndtype: int64\n##################### Quantiles #####################\n                            0.00      0.05      0.50       0.95       0.99    1.00\nPregnancies                0.000   0.00000    3.0000   10.00000   13.00000   17.00\nGlucose                    0.000  79.00000  117.0000  181.00000  196.00000  199.00\nBloodPressure              0.000  38.70000   72.0000   90.00000  106.00000  122.00\nSkinThickness              0.000   0.00000   23.0000   44.00000   51.33000   99.00\nInsulin                    0.000   0.00000   30.5000  293.00000  519.90000  846.00\nBMI                        0.000  21.80000   32.0000   44.39500   50.75900   67.10\nDiabetesPedigreeFunction   0.078   0.14035    0.3725    1.13285    1.69833    2.42\nAge                       21.000  21.00000   29.0000   58.00000   67.00000   81.00\nOutcome                    0.000   0.00000    0.0000    1.00000    1.00000    1.00\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"grab_col_names\">grab_col_names</a>","metadata":{}},{"cell_type":"code","source":"cat_cols, num_cols, cat_but_car = grab_col_names(df, cat_th=5, car_th=20)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:14:08.080172Z","iopub.execute_input":"2024-07-13T20:14:08.080928Z","iopub.status.idle":"2024-07-13T20:14:08.089089Z","shell.execute_reply.started":"2024-07-13T20:14:08.080892Z","shell.execute_reply":"2024-07-13T20:14:08.087956Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Observations: 768\nVariables: 9\ncat_cols: 1\nnum_cols: 8\ncat_but_car: 0\nnum_but_cat: 1\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"cat_summary\">cat_summary</a>","metadata":{}},{"cell_type":"code","source":"for col in cat_cols:\n    cat_summary(df, col)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:15:42.421598Z","iopub.execute_input":"2024-07-13T20:15:42.421956Z","iopub.status.idle":"2024-07-13T20:15:42.433875Z","shell.execute_reply.started":"2024-07-13T20:15:42.421929Z","shell.execute_reply":"2024-07-13T20:15:42.432810Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"         Outcome      Ratio\nOutcome                    \n0            500  65.104167\n1            268  34.895833\n##########################################\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"num_summary\">num_summary</a>","metadata":{}},{"cell_type":"code","source":"df[num_cols].describe().T","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:16:44.412329Z","iopub.execute_input":"2024-07-13T20:16:44.412707Z","iopub.status.idle":"2024-07-13T20:16:44.456211Z","shell.execute_reply.started":"2024-07-13T20:16:44.412678Z","shell.execute_reply":"2024-07-13T20:16:44.455142Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"                          count        mean         std     min       25%       50%        75%     max\nPregnancies               768.0    3.845052    3.369578   0.000   1.00000    3.0000    6.00000   17.00\nGlucose                   768.0  120.894531   31.972618   0.000  99.00000  117.0000  140.25000  199.00\nBloodPressure             768.0   69.105469   19.355807   0.000  62.00000   72.0000   80.00000  122.00\nSkinThickness             768.0   20.536458   15.952218   0.000   0.00000   23.0000   32.00000   99.00\nInsulin                   768.0   79.799479  115.244002   0.000   0.00000   30.5000  127.25000  846.00\nBMI                       768.0   31.992578    7.884160   0.000  27.30000   32.0000   36.60000   67.10\nDiabetesPedigreeFunction  768.0    0.471876    0.331329   0.078   0.24375    0.3725    0.62625    2.42\nAge                       768.0   33.240885   11.760232  21.000  24.00000   29.0000   41.00000   81.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Pregnancies</th>\n      <td>768.0</td>\n      <td>3.845052</td>\n      <td>3.369578</td>\n      <td>0.000</td>\n      <td>1.00000</td>\n      <td>3.0000</td>\n      <td>6.00000</td>\n      <td>17.00</td>\n    </tr>\n    <tr>\n      <th>Glucose</th>\n      <td>768.0</td>\n      <td>120.894531</td>\n      <td>31.972618</td>\n      <td>0.000</td>\n      <td>99.00000</td>\n      <td>117.0000</td>\n      <td>140.25000</td>\n      <td>199.00</td>\n    </tr>\n    <tr>\n      <th>BloodPressure</th>\n      <td>768.0</td>\n      <td>69.105469</td>\n      <td>19.355807</td>\n      <td>0.000</td>\n      <td>62.00000</td>\n      <td>72.0000</td>\n      <td>80.00000</td>\n      <td>122.00</td>\n    </tr>\n    <tr>\n      <th>SkinThickness</th>\n      <td>768.0</td>\n      <td>20.536458</td>\n      <td>15.952218</td>\n      <td>0.000</td>\n      <td>0.00000</td>\n      <td>23.0000</td>\n      <td>32.00000</td>\n      <td>99.00</td>\n    </tr>\n    <tr>\n      <th>Insulin</th>\n      <td>768.0</td>\n      <td>79.799479</td>\n      <td>115.244002</td>\n      <td>0.000</td>\n      <td>0.00000</td>\n      <td>30.5000</td>\n      <td>127.25000</td>\n      <td>846.00</td>\n    </tr>\n    <tr>\n      <th>BMI</th>\n      <td>768.0</td>\n      <td>31.992578</td>\n      <td>7.884160</td>\n      <td>0.000</td>\n      <td>27.30000</td>\n      <td>32.0000</td>\n      <td>36.60000</td>\n      <td>67.10</td>\n    </tr>\n    <tr>\n      <th>DiabetesPedigreeFunction</th>\n      <td>768.0</td>\n      <td>0.471876</td>\n      <td>0.331329</td>\n      <td>0.078</td>\n      <td>0.24375</td>\n      <td>0.3725</td>\n      <td>0.62625</td>\n      <td>2.42</td>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <td>768.0</td>\n      <td>33.240885</td>\n      <td>11.760232</td>\n      <td>21.000</td>\n      <td>24.00000</td>\n      <td>29.0000</td>\n      <td>41.00000</td>\n      <td>81.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"for col in num_cols:\n    num_summary(df, col, plot=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"target_summary_with_num\">target_summary_with_num</a>","metadata":{}},{"cell_type":"code","source":"for col in num_cols:\n    target_summary_with_num(df, \"Outcome\", col)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:25:23.701978Z","iopub.execute_input":"2024-07-13T20:25:23.702981Z","iopub.status.idle":"2024-07-13T20:25:23.732766Z","shell.execute_reply.started":"2024-07-13T20:25:23.702946Z","shell.execute_reply":"2024-07-13T20:25:23.731684Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"         Pregnancies\nOutcome             \n0           3.298000\n1           4.865672\n\n\n            Glucose\nOutcome            \n0        109.980000\n1        141.257463\n\n\n         BloodPressure\nOutcome               \n0            68.184000\n1            70.824627\n\n\n         SkinThickness\nOutcome               \n0            19.664000\n1            22.164179\n\n\n            Insulin\nOutcome            \n0         68.792000\n1        100.335821\n\n\n               BMI\nOutcome           \n0        30.304200\n1        35.142537\n\n\n         DiabetesPedigreeFunction\nOutcome                          \n0                        0.429734\n1                        0.550500\n\n\n               Age\nOutcome           \n0        31.190000\n1        37.067164\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#####  <a class=\"anchor\" id=\"target_summary_with_cat\">target_summary_with_cat</a>","metadata":{}},{"cell_type":"code","source":"for col in cat_cols:\n    target_summary_with_cat(df, \"Outcome\", col)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:27:04.294658Z","iopub.execute_input":"2024-07-13T20:27:04.295052Z","iopub.status.idle":"2024-07-13T20:27:04.306576Z","shell.execute_reply.started":"2024-07-13T20:27:04.295022Z","shell.execute_reply":"2024-07-13T20:27:04.305643Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Outcome\n         TARGET_MEAN  Count      Ratio\nOutcome                               \n0                0.0    500  65.104167\n1                1.0    268  34.895833\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"##### <a class=\"anchor\" id=\"correlation_matrix\">correlation_matrix</a>","metadata":{}},{"cell_type":"code","source":"correlation_matrix(df, num_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:19:57.947172Z","iopub.execute_input":"2024-07-13T20:19:57.947586Z","iopub.status.idle":"2024-07-13T20:19:58.408725Z","shell.execute_reply.started":"2024-07-13T20:19:57.947553Z","shell.execute_reply":"2024-07-13T20:19:58.407601Z"},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"markdown","source":"## <a class=\"anchor\" id=\"DataPrepFeatureEngineering\">Data Preprocessing & Feature Engineering</a>","metadata":{}},{"cell_type":"code","source":"# Capitalize all feature labels\ndf.columns = [col.upper() for col in df.columns]","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:46:54.853959Z","iopub.execute_input":"2024-07-13T20:46:54.854371Z","iopub.status.idle":"2024-07-13T20:46:54.859803Z","shell.execute_reply.started":"2024-07-13T20:46:54.854339Z","shell.execute_reply":"2024-07-13T20:46:54.858679Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"# Feature Engineering - GLUCOSE -> NEW_GLUCOSE_CAT \n# \"normal\" if between -1 and 139, \n# \"prediabetes\" if between 139 and 200\ndf[\"NEW_GLUCOSE_CAT\"] = pd.cut(x=df[\"GLUCOSE\"], bins=[-1, 139, 200], labels=[\"normal\", \"prediabetes\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:49:54.393004Z","iopub.execute_input":"2024-07-13T20:49:54.393440Z","iopub.status.idle":"2024-07-13T20:49:54.404262Z","shell.execute_reply.started":"2024-07-13T20:49:54.393381Z","shell.execute_reply":"2024-07-13T20:49:54.403112Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"# Feature Engineering - AGE -> NEW_AGE_CAT\n# \"young\" if less than 35,\n# \"middleage\" if between 35 and 55, \n# \"old\" if more than 55\ndf.loc[(df[\"AGE\"] < 35), \"NEW_AGE_CAT\"] = \"young\"\ndf.loc[(df[\"AGE\"] >= 35) & (df[\"AGE\"] <= 55), \"NEW_AGE_CAT\"] = \"middleage\"\ndf.loc[(df[\"AGE\"] > 55), \"NEW_AGE_CAT\"] = \"old\"","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:59:18.494638Z","iopub.execute_input":"2024-07-13T20:59:18.495043Z","iopub.status.idle":"2024-07-13T20:59:18.505335Z","shell.execute_reply.started":"2024-07-13T20:59:18.495010Z","shell.execute_reply":"2024-07-13T20:59:18.504074Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"# Feature Engineering - BMI -> NEW_BMI_RANGE\n# \"underweight\" if less than 18.5, \n# \"healthy\" if between 18.5 and 24.9, \n# \"overweight\" if between 29.9 and 100, \n# \"obese\" if more than 100\n# -1 to include zeros\ndf[\"NEW_BMI_RANGE\"] = pd.cut(x=df[\"BMI\"], bins=[-1, 18.5, 24.9, 29.9, 100],\n                            labels=[\"underweight\", \"healthy\", \"overweight\", \"obese\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:06:16.775073Z","iopub.execute_input":"2024-07-13T21:06:16.775493Z","iopub.status.idle":"2024-07-13T21:06:16.783349Z","shell.execute_reply.started":"2024-07-13T21:06:16.775460Z","shell.execute_reply":"2024-07-13T21:06:16.782277Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# Feature Engineering - BLOODPRESSURE -> NEW_BLOODPRESSURE\n# \"normal\" if less than 79, \n# \"hs1\" if between 79 and 89, \n# \"hs2\" if between 89 and 123\n# -1 to include zeros\ndf[\"NEW_BLOODPRESSURE\"] = pd.cut(x=df[\"BLOODPRESSURE\"], bins=[-1, 79, 89, 123], \n                                labels=[\"normal\", \"hs1\", \"hs2\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:11:39.763724Z","iopub.execute_input":"2024-07-13T21:11:39.764112Z","iopub.status.idle":"2024-07-13T21:11:39.772701Z","shell.execute_reply.started":"2024-07-13T21:11:39.764083Z","shell.execute_reply":"2024-07-13T21:11:39.771218Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"# DF has changed so regathering features by their types\ncat_cols, num_cols, cat_but_car = grab_col_names(df, cat_th=5, car_th=20)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:16:28.491594Z","iopub.execute_input":"2024-07-13T21:16:28.492037Z","iopub.status.idle":"2024-07-13T21:16:28.505030Z","shell.execute_reply.started":"2024-07-13T21:16:28.492007Z","shell.execute_reply":"2024-07-13T21:16:28.503814Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"Observations: 768\nVariables: 13\ncat_cols: 5\nnum_cols: 8\ncat_but_car: 0\nnum_but_cat: 4\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in cat_cols:\n    cat_summary(df, col)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:17:25.057674Z","iopub.execute_input":"2024-07-13T21:17:25.058047Z","iopub.status.idle":"2024-07-13T21:17:25.087086Z","shell.execute_reply.started":"2024-07-13T21:17:25.058020Z","shell.execute_reply":"2024-07-13T21:17:25.085993Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"             NEW_AGE_CAT      Ratio\nNEW_AGE_CAT                        \nyoung                488  63.541667\nmiddleage            230  29.947917\nold                   50   6.510417\n##########################################\n         OUTCOME      Ratio\nOUTCOME                    \n0            500  65.104167\n1            268  34.895833\n##########################################\n                 NEW_GLUCOSE_CAT      Ratio\nNEW_GLUCOSE_CAT                            \nnormal                       571  74.348958\nprediabetes                  197  25.651042\n##########################################\n               NEW_BMI_RANGE      Ratio\nNEW_BMI_RANGE                          \nobese                    472  61.458333\noverweight               179  23.307292\nhealthy                  102  13.281250\nunderweight               15   1.953125\n##########################################\n                   NEW_BLOODPRESSURE      Ratio\nNEW_BLOODPRESSURE                              \nnormal                           563  73.307292\nhs1                              145  18.880208\nhs2                               60   7.812500\n##########################################\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in cat_cols:\n    target_summary_with_cat(df, \"OUTCOME\", col)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:18:56.834993Z","iopub.execute_input":"2024-07-13T21:18:56.835400Z","iopub.status.idle":"2024-07-13T21:18:56.873417Z","shell.execute_reply.started":"2024-07-13T21:18:56.835353Z","shell.execute_reply":"2024-07-13T21:18:56.872378Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"NEW_AGE_CAT\n             TARGET_MEAN  Count      Ratio\nNEW_AGE_CAT                               \nmiddleage       0.543478    230  29.947917\nold             0.340000     50   6.510417\nyoung           0.258197    488  63.541667\n\n\nOUTCOME\n         TARGET_MEAN  Count      Ratio\nOUTCOME                               \n0                0.0    500  65.104167\n1                1.0    268  34.895833\n\n\nNEW_GLUCOSE_CAT\n                 TARGET_MEAN  Count      Ratio\nNEW_GLUCOSE_CAT                               \nnormal              0.232925    571  74.348958\nprediabetes         0.685279    197  25.651042\n\n\nNEW_BMI_RANGE\n               TARGET_MEAN  Count      Ratio\nNEW_BMI_RANGE                               \nunderweight       0.133333     15   1.953125\nhealthy           0.068627    102  13.281250\noverweight        0.223464    179  23.307292\nobese             0.463983    472  61.458333\n\n\nNEW_BLOODPRESSURE\n                   TARGET_MEAN  Count      Ratio\nNEW_BLOODPRESSURE                               \nnormal                0.316163    563  73.307292\nhs1                   0.420690    145  18.880208\nhs2                   0.483333     60   7.812500\n\n\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/881390516.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean(),\n/tmp/ipykernel_33/881390516.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean(),\n/tmp/ipykernel_33/881390516.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean(),\n","output_type":"stream"}]},{"cell_type":"code","source":"cat_cols = [col for col in cat_cols if \"OUTCOME\" not in col]\nprint(cat_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:29:46.028360Z","iopub.execute_input":"2024-07-13T21:29:46.029268Z","iopub.status.idle":"2024-07-13T21:29:46.034349Z","shell.execute_reply.started":"2024-07-13T21:29:46.029233Z","shell.execute_reply":"2024-07-13T21:29:46.033249Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"['NEW_AGE_CAT', 'NEW_GLUCOSE_CAT', 'NEW_BMI_RANGE', 'NEW_BLOODPRESSURE']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### <a class=\"anchor\" id=\"dpfefuncs\">Data Prep & Feature Eng Functions</a>","metadata":{}},{"cell_type":"code","source":"def check_outlier(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:40:17.623017Z","iopub.execute_input":"2024-07-13T21:40:17.623435Z","iopub.status.idle":"2024-07-13T21:40:17.629359Z","shell.execute_reply.started":"2024-07-13T21:40:17.623380Z","shell.execute_reply":"2024-07-13T21:40:17.628284Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):  \n    quartile1 = dataframe[col_name].quantile(q1)  \n    quartile3 = dataframe[col_name].quantile(q3)  \n    interquantile_range = quartile3 - quartile1  \n    up_limit = quartile3 + 1.5 * interquantile_range  \n    low_limit = quartile1 - 1.5 * interquantile_range  \n    return low_limit, up_limit","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:42:20.738103Z","iopub.execute_input":"2024-07-13T20:42:20.739148Z","iopub.status.idle":"2024-07-13T20:42:20.744738Z","shell.execute_reply.started":"2024-07-13T20:42:20.739113Z","shell.execute_reply":"2024-07-13T20:42:20.743563Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"def replace_with_thresholds(dataframe, variable):  \n    low_limit, up_limit = outlier_thresholds(dataframe, variable, q1=0.05, q3=0.95)  \n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit  \n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:42:22.627770Z","iopub.execute_input":"2024-07-13T20:42:22.628159Z","iopub.status.idle":"2024-07-13T20:42:22.633996Z","shell.execute_reply.started":"2024-07-13T20:42:22.628129Z","shell.execute_reply":"2024-07-13T20:42:22.632916Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):  \n    # Convert categorical variable into dummy/indicator variables.  \n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)  \n    return dataframe","metadata":{"execution":{"iopub.status.busy":"2024-07-13T20:42:24.653570Z","iopub.execute_input":"2024-07-13T20:42:24.653920Z","iopub.status.idle":"2024-07-13T20:42:24.659420Z","shell.execute_reply.started":"2024-07-13T20:42:24.653894Z","shell.execute_reply":"2024-07-13T20:42:24.658125Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"##### <a class=\"anchor\" id=\"one_hot_encoder\">one_hot_encoder</a>","metadata":{}},{"cell_type":"code","source":"df = one_hot_encoder(df, cat_cols, drop_first=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:31:50.593000Z","iopub.execute_input":"2024-07-13T21:31:50.593440Z","iopub.status.idle":"2024-07-13T21:31:50.604944Z","shell.execute_reply.started":"2024-07-13T21:31:50.593380Z","shell.execute_reply":"2024-07-13T21:31:50.603814Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"df.columns = [col.upper() for col in df.columns]","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:32:32.765480Z","iopub.execute_input":"2024-07-13T21:32:32.766601Z","iopub.status.idle":"2024-07-13T21:32:32.771778Z","shell.execute_reply.started":"2024-07-13T21:32:32.766563Z","shell.execute_reply":"2024-07-13T21:32:32.770470Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"# Latest features to grab\ncat_cols, num_cols, cat_but_car = grab_col_names(df, cat_th=5, car_th=20)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:35:47.045745Z","iopub.execute_input":"2024-07-13T21:35:47.046127Z","iopub.status.idle":"2024-07-13T21:35:47.057128Z","shell.execute_reply.started":"2024-07-13T21:35:47.046097Z","shell.execute_reply":"2024-07-13T21:35:47.055950Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Observations: 768\nVariables: 17\ncat_cols: 9\nnum_cols: 8\ncat_but_car: 0\nnum_but_cat: 9\n","output_type":"stream"}]},{"cell_type":"code","source":"cat_cols = [col for col in cat_cols if \"OUTCOME\" not in col]","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:37:33.244251Z","iopub.execute_input":"2024-07-13T21:37:33.244661Z","iopub.status.idle":"2024-07-13T21:37:33.249766Z","shell.execute_reply.started":"2024-07-13T21:37:33.244628Z","shell.execute_reply":"2024-07-13T21:37:33.248637Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"##### <a class=\"anchor\" id=\"check_outlier\">check_outlier</a>","metadata":{}},{"cell_type":"code","source":"for col in num_cols:\n    print(col, check_outlier(df, col, 0.05, 0.95))","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:43:17.636472Z","iopub.execute_input":"2024-07-13T21:43:17.636853Z","iopub.status.idle":"2024-07-13T21:43:17.666061Z","shell.execute_reply.started":"2024-07-13T21:43:17.636825Z","shell.execute_reply":"2024-07-13T21:43:17.664901Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"PREGNANCIES False\nGLUCOSE False\nBLOODPRESSURE False\nSKINTHICKNESS False\nINSULIN False\nBMI False\nDIABETESPEDIGREEFUNCTION False\nAGE False\n","output_type":"stream"}]},{"cell_type":"markdown","source":"##### <a class=\"anchor\" id=\"replace_with_thresholds\">replace_with_thresholds</a>","metadata":{}},{"cell_type":"code","source":"replace_with_thresholds(df, \"INSULIN\")","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:42:36.933310Z","iopub.execute_input":"2024-07-13T21:42:36.934240Z","iopub.status.idle":"2024-07-13T21:42:36.943999Z","shell.execute_reply.started":"2024-07-13T21:42:36.934200Z","shell.execute_reply":"2024-07-13T21:42:36.942981Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/2611075531.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '-439.5' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n","output_type":"stream"}]},{"cell_type":"markdown","source":"##### <a class=\"anchor\" id=\"diabetes_data_prep\">diabetes_data_prep</a>","metadata":{}},{"cell_type":"code","source":"def diabetes_data_prep(dataframe):\n    dataframe.columns = [col.upper() for col in dataframe.columns]\n\n    # Glucose\n    dataframe['NEW_GLUCOSE_CAT'] = pd.cut(x=dataframe['GLUCOSE'], bins=[-1, 139, 200], labels=[\"normal\", \"prediabetes\"])\n\n    # Age\n    dataframe.loc[(dataframe['AGE'] < 35), \"NEW_AGE_CAT\"] = 'young'\n    dataframe.loc[(dataframe['AGE'] >= 35) & (dataframe['AGE'] <= 55), \"NEW_AGE_CAT\"] = 'middleage'\n    dataframe.loc[(dataframe['AGE'] > 55), \"NEW_AGE_CAT\"] = 'old'\n\n    # BMI\n    dataframe['NEW_BMI_RANGE'] = pd.cut(x=dataframe['BMI'], bins=[-1, 18.5, 24.9, 29.9, 100],\n                                        labels=[\"underweight\", \"healty\", \"overweight\", \"obese\"])\n\n    # BloodPressure\n    dataframe['NEW_BLOODPRESSURE'] = pd.cut(x=dataframe['BLOODPRESSURE'], bins=[-1, 79, 89, 123],\n                                            labels=[\"normal\", \"hs1\", \"hs2\"])\n\n    cat_cols, num_cols, cat_but_car = grab_col_names(dataframe, cat_th=5, car_th=20)\n\n    cat_cols = [col for col in cat_cols if \"OUTCOME\" not in col]\n\n    df = one_hot_encoder(dataframe, cat_cols, drop_first=True)\n\n    df.columns = [col.upper() for col in df.columns]\n\n    cat_cols, num_cols, cat_but_car = grab_col_names(df, cat_th=5, car_th=20)\n\n    cat_cols = [col for col in cat_cols if \"OUTCOME\" not in col]\n\n    replace_with_thresholds(df, \"INSULIN\")\n\n    X_scaled = StandardScaler().fit_transform(df[num_cols])\n    df[num_cols] = pd.DataFrame(X_scaled, columns=df[num_cols].columns)\n\n    y = df[\"OUTCOME\"]\n    X = df.drop([\"OUTCOME\"], axis=1)\n\n    return X, y","metadata":{"execution":{"iopub.status.busy":"2024-07-13T22:12:41.601097Z","iopub.execute_input":"2024-07-13T22:12:41.602341Z","iopub.status.idle":"2024-07-13T22:12:41.616118Z","shell.execute_reply.started":"2024-07-13T22:12:41.602299Z","shell.execute_reply":"2024-07-13T22:12:41.614907Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"markdown","source":"#### <a class=\"anchor\"  id=\"standardization\">Standardization</a>","metadata":{}},{"cell_type":"code","source":"X_scaled = StandardScaler().fit_transform(df[num_cols])","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:53:19.426161Z","iopub.execute_input":"2024-07-13T21:53:19.426571Z","iopub.status.idle":"2024-07-13T21:53:19.438272Z","shell.execute_reply.started":"2024-07-13T21:53:19.426540Z","shell.execute_reply":"2024-07-13T21:53:19.437112Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"df[num_cols] = pd.DataFrame(X_scaled, columns=df[num_cols].columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:53:50.641654Z","iopub.execute_input":"2024-07-13T21:53:50.642041Z","iopub.status.idle":"2024-07-13T21:53:50.650869Z","shell.execute_reply.started":"2024-07-13T21:53:50.642012Z","shell.execute_reply":"2024-07-13T21:53:50.649590Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"y = df[\"OUTCOME\"]\nX = df.drop([\"OUTCOME\"], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:55:59.306059Z","iopub.execute_input":"2024-07-13T21:55:59.306446Z","iopub.status.idle":"2024-07-13T21:55:59.312566Z","shell.execute_reply.started":"2024-07-13T21:55:59.306408Z","shell.execute_reply":"2024-07-13T21:55:59.311384Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"check_df(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T21:56:08.606892Z","iopub.execute_input":"2024-07-13T21:56:08.607272Z","iopub.status.idle":"2024-07-13T21:56:08.643470Z","shell.execute_reply.started":"2024-07-13T21:56:08.607241Z","shell.execute_reply":"2024-07-13T21:56:08.642090Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"##################### Shape #####################\n(768, 16)\n##################### Types #####################\nPREGNANCIES                    float64\nGLUCOSE                        float64\nBLOODPRESSURE                  float64\nSKINTHICKNESS                  float64\nINSULIN                        float64\nBMI                            float64\nDIABETESPEDIGREEFUNCTION       float64\nAGE                            float64\nNEW_AGE_CAT_OLD                   bool\nNEW_AGE_CAT_YOUNG                 bool\nNEW_GLUCOSE_CAT_PREDIABETES       bool\nNEW_BMI_RANGE_HEALTHY             bool\nNEW_BMI_RANGE_OVERWEIGHT          bool\nNEW_BMI_RANGE_OBESE               bool\nNEW_BLOODPRESSURE_HS1             bool\nNEW_BLOODPRESSURE_HS2             bool\ndtype: object\n##################### Duplicated Values #####################\n0\n##################### Number of Unique Values #####################\nPREGNANCIES                     17\nGLUCOSE                        136\nBLOODPRESSURE                   47\nSKINTHICKNESS                   51\nINSULIN                        185\nBMI                            248\nDIABETESPEDIGREEFUNCTION       517\nAGE                             52\nOUTCOME                          2\nNEW_AGE_CAT_OLD                  2\nNEW_AGE_CAT_YOUNG                2\nNEW_GLUCOSE_CAT_PREDIABETES      2\nNEW_BMI_RANGE_HEALTHY            2\nNEW_BMI_RANGE_OVERWEIGHT         2\nNEW_BMI_RANGE_OBESE              2\nNEW_BLOODPRESSURE_HS1            2\nNEW_BLOODPRESSURE_HS2            2\ndtype: int64\n##################### Head #####################\n   PREGNANCIES   GLUCOSE  BLOODPRESSURE  SKINTHICKNESS   INSULIN       BMI  DIABETESPEDIGREEFUNCTION       AGE  NEW_AGE_CAT_OLD  NEW_AGE_CAT_YOUNG  NEW_GLUCOSE_CAT_PREDIABETES  NEW_BMI_RANGE_HEALTHY  NEW_BMI_RANGE_OVERWEIGHT  NEW_BMI_RANGE_OBESE  NEW_BLOODPRESSURE_HS1  NEW_BLOODPRESSURE_HS2\n0     0.639947  0.848324       0.149641       0.907270 -0.697537  0.204013                  0.468492  1.425995            False              False                         True                  False                     False                 True                  False                  False\n1    -0.844885 -1.123396      -0.160546       0.530902 -0.697537 -0.684422                 -0.365061 -0.190672            False               True                        False                  False                      True                False                  False                  False\n2     1.233880  1.943724      -0.263941      -1.288212 -0.697537 -1.103255                  0.604397 -0.105584            False               True                         True                   True                     False                False                  False                  False\n3    -0.844885 -0.998208      -0.160546       0.154533  0.125808 -0.494043                 -0.920763 -1.041549            False               True                        False                  False                      True                False                  False                  False\n4    -1.141852  0.504055      -1.504687       0.907270  0.773973  1.409746                  5.484909 -0.020496            False               True                        False                  False                     False                 True                  False                  False\n##################### Tail #####################\n     PREGNANCIES   GLUCOSE  BLOODPRESSURE  SKINTHICKNESS   INSULIN       BMI  DIABETESPEDIGREEFUNCTION       AGE  NEW_AGE_CAT_OLD  NEW_AGE_CAT_YOUNG  NEW_GLUCOSE_CAT_PREDIABETES  NEW_BMI_RANGE_HEALTHY  NEW_BMI_RANGE_OVERWEIGHT  NEW_BMI_RANGE_OBESE  NEW_BLOODPRESSURE_HS1  NEW_BLOODPRESSURE_HS2\n763     1.827813 -0.622642       0.356432       1.722735  0.879080  0.115169                 -0.908682  2.532136             True              False                        False                  False                     False                 True                  False                  False\n764    -0.547919  0.034598       0.046245       0.405445 -0.697537  0.610154                 -0.398282 -0.531023            False               True                        False                  False                     False                 True                  False                  False\n765     0.342981  0.003301       0.149641       0.154533  0.283469 -0.735190                 -0.685193 -0.275760            False               True                        False                  False                      True                False                  False                  False\n766    -0.844885  0.159787      -0.470732      -1.288212 -0.697537 -0.240205                 -0.371101  1.170732            False              False                        False                  False                     False                 True                  False                  False\n767    -0.844885 -0.873019       0.046245       0.656358 -0.697537 -0.202129                 -0.473785 -0.871374            False               True                        False                  False                     False                 True                  False                  False\n##################### NA #####################\nPREGNANCIES                    0\nGLUCOSE                        0\nBLOODPRESSURE                  0\nSKINTHICKNESS                  0\nINSULIN                        0\nBMI                            0\nDIABETESPEDIGREEFUNCTION       0\nAGE                            0\nNEW_AGE_CAT_OLD                0\nNEW_AGE_CAT_YOUNG              0\nNEW_GLUCOSE_CAT_PREDIABETES    0\nNEW_BMI_RANGE_HEALTHY          0\nNEW_BMI_RANGE_OVERWEIGHT       0\nNEW_BMI_RANGE_OBESE            0\nNEW_BLOODPRESSURE_HS1          0\nNEW_BLOODPRESSURE_HS2          0\ndtype: int64\n##################### Quantiles #####################\n                              0.00      0.05      0.50      0.95      0.99      1.00\nPREGNANCIES              -1.141852 -1.141852 -0.250952  1.827813  2.718712  3.906578\nGLUCOSE                  -3.783654 -1.311179 -0.121888  1.881130  2.350587  2.444478\nBLOODPRESSURE            -3.572597 -1.571894  0.149641  1.080200  1.907364  2.734528\nSKINTHICKNESS            -1.288212 -1.288212  0.154533  1.471822  1.931619  4.921866\nINSULIN                  -0.697537 -0.697537 -0.430388  1.868845  3.856259  5.718419\nBMI                      -4.060474 -1.293634  0.000942  1.574106  2.381820  4.455807\nDIABETESPEDIGREEFUNCTION -1.189553 -1.001249 -0.300128  1.996219  3.704036  5.883565\nAGE                      -1.041549 -1.041549 -0.360847  2.106697  2.872487  4.063716\n","output_type":"stream"}]},{"cell_type":"markdown","source":"---\n#### PIPELINE\n---","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/docspot/datasets_228_482_diabetes.csv\")\n\ncheck_df(df)\n\nX, y = diabetes_data_prep(df)\n\ncheck_df(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T22:13:18.571474Z","iopub.execute_input":"2024-07-13T22:13:18.571866Z","iopub.status.idle":"2024-07-13T22:13:18.674653Z","shell.execute_reply.started":"2024-07-13T22:13:18.571835Z","shell.execute_reply":"2024-07-13T22:13:18.673531Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"##################### Shape #####################\n(768, 9)\n##################### Types #####################\nPregnancies                   int64\nGlucose                       int64\nBloodPressure                 int64\nSkinThickness                 int64\nInsulin                       int64\nBMI                         float64\nDiabetesPedigreeFunction    float64\nAge                           int64\nOutcome                       int64\ndtype: object\n##################### Duplicated Values #####################\n0\n##################### Number of Unique Values #####################\nPregnancies                  17\nGlucose                     136\nBloodPressure                47\nSkinThickness                51\nInsulin                     186\nBMI                         248\nDiabetesPedigreeFunction    517\nAge                          52\nOutcome                       2\ndtype: int64\n##################### Head #####################\n   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  DiabetesPedigreeFunction  Age  Outcome\n0            6      148             72             35        0  33.6                     0.627   50        1\n1            1       85             66             29        0  26.6                     0.351   31        0\n2            8      183             64              0        0  23.3                     0.672   32        1\n3            1       89             66             23       94  28.1                     0.167   21        0\n4            0      137             40             35      168  43.1                     2.288   33        1\n##################### Tail #####################\n     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  DiabetesPedigreeFunction  Age  Outcome\n763           10      101             76             48      180  32.9                     0.171   63        0\n764            2      122             70             27        0  36.8                     0.340   27        0\n765            5      121             72             23      112  26.2                     0.245   30        0\n766            1      126             60              0        0  30.1                     0.349   47        1\n767            1       93             70             31        0  30.4                     0.315   23        0\n##################### NA #####################\nPregnancies                 0\nGlucose                     0\nBloodPressure               0\nSkinThickness               0\nInsulin                     0\nBMI                         0\nDiabetesPedigreeFunction    0\nAge                         0\nOutcome                     0\ndtype: int64\n##################### Quantiles #####################\n                            0.00      0.05      0.50       0.95       0.99    1.00\nPregnancies                0.000   0.00000    3.0000   10.00000   13.00000   17.00\nGlucose                    0.000  79.00000  117.0000  181.00000  196.00000  199.00\nBloodPressure              0.000  38.70000   72.0000   90.00000  106.00000  122.00\nSkinThickness              0.000   0.00000   23.0000   44.00000   51.33000   99.00\nInsulin                    0.000   0.00000   30.5000  293.00000  519.90000  846.00\nBMI                        0.000  21.80000   32.0000   44.39500   50.75900   67.10\nDiabetesPedigreeFunction   0.078   0.14035    0.3725    1.13285    1.69833    2.42\nAge                       21.000  21.00000   29.0000   58.00000   67.00000   81.00\nOutcome                    0.000   0.00000    0.0000    1.00000    1.00000    1.00\nObservations: 768\nVariables: 13\ncat_cols: 5\nnum_cols: 8\ncat_but_car: 0\nnum_but_cat: 4\nObservations: 768\nVariables: 17\ncat_cols: 9\nnum_cols: 8\ncat_but_car: 0\nnum_but_cat: 9\n##################### Shape #####################\n(768, 16)\n##################### Types #####################\nPREGNANCIES                    float64\nGLUCOSE                        float64\nBLOODPRESSURE                  float64\nSKINTHICKNESS                  float64\nINSULIN                        float64\nBMI                            float64\nDIABETESPEDIGREEFUNCTION       float64\nAGE                            float64\nNEW_AGE_CAT_OLD                   bool\nNEW_AGE_CAT_YOUNG                 bool\nNEW_GLUCOSE_CAT_PREDIABETES       bool\nNEW_BMI_RANGE_HEALTY              bool\nNEW_BMI_RANGE_OVERWEIGHT          bool\nNEW_BMI_RANGE_OBESE               bool\nNEW_BLOODPRESSURE_HS1             bool\nNEW_BLOODPRESSURE_HS2             bool\ndtype: object\n##################### Duplicated Values #####################\n0\n##################### Number of Unique Values #####################\nPREGNANCIES                  17\nGLUCOSE                     136\nBLOODPRESSURE                47\nSKINTHICKNESS                51\nINSULIN                     186\nBMI                         248\nDIABETESPEDIGREEFUNCTION    517\nAGE                          52\nOUTCOME                       2\nNEW_GLUCOSE_CAT               2\nNEW_AGE_CAT                   3\nNEW_BMI_RANGE                 4\nNEW_BLOODPRESSURE             3\ndtype: int64\n##################### Head #####################\n   PREGNANCIES   GLUCOSE  BLOODPRESSURE  SKINTHICKNESS   INSULIN       BMI  DIABETESPEDIGREEFUNCTION       AGE  NEW_AGE_CAT_OLD  NEW_AGE_CAT_YOUNG  NEW_GLUCOSE_CAT_PREDIABETES  NEW_BMI_RANGE_HEALTY  NEW_BMI_RANGE_OVERWEIGHT  NEW_BMI_RANGE_OBESE  NEW_BLOODPRESSURE_HS1  NEW_BLOODPRESSURE_HS2\n0     0.639947  0.848324       0.149641       0.907270 -0.697537  0.204013                  0.468492  1.425995            False              False                         True                 False                     False                 True                  False                  False\n1    -0.844885 -1.123396      -0.160546       0.530902 -0.697537 -0.684422                 -0.365061 -0.190672            False               True                        False                 False                      True                False                  False                  False\n2     1.233880  1.943724      -0.263941      -1.288212 -0.697537 -1.103255                  0.604397 -0.105584            False               True                         True                  True                     False                False                  False                  False\n3    -0.844885 -0.998208      -0.160546       0.154533  0.125808 -0.494043                 -0.920763 -1.041549            False               True                        False                 False                      True                False                  False                  False\n4    -1.141852  0.504055      -1.504687       0.907270  0.773973  1.409746                  5.484909 -0.020496            False               True                        False                 False                     False                 True                  False                  False\n##################### Tail #####################\n     PREGNANCIES   GLUCOSE  BLOODPRESSURE  SKINTHICKNESS   INSULIN       BMI  DIABETESPEDIGREEFUNCTION       AGE  NEW_AGE_CAT_OLD  NEW_AGE_CAT_YOUNG  NEW_GLUCOSE_CAT_PREDIABETES  NEW_BMI_RANGE_HEALTY  NEW_BMI_RANGE_OVERWEIGHT  NEW_BMI_RANGE_OBESE  NEW_BLOODPRESSURE_HS1  NEW_BLOODPRESSURE_HS2\n763     1.827813 -0.622642       0.356432       1.722735  0.879080  0.115169                 -0.908682  2.532136             True              False                        False                 False                     False                 True                  False                  False\n764    -0.547919  0.034598       0.046245       0.405445 -0.697537  0.610154                 -0.398282 -0.531023            False               True                        False                 False                     False                 True                  False                  False\n765     0.342981  0.003301       0.149641       0.154533  0.283469 -0.735190                 -0.685193 -0.275760            False               True                        False                 False                      True                False                  False                  False\n766    -0.844885  0.159787      -0.470732      -1.288212 -0.697537 -0.240205                 -0.371101  1.170732            False              False                        False                 False                     False                 True                  False                  False\n767    -0.844885 -0.873019       0.046245       0.656358 -0.697537 -0.202129                 -0.473785 -0.871374            False               True                        False                 False                     False                 True                  False                  False\n##################### NA #####################\nPREGNANCIES                    0\nGLUCOSE                        0\nBLOODPRESSURE                  0\nSKINTHICKNESS                  0\nINSULIN                        0\nBMI                            0\nDIABETESPEDIGREEFUNCTION       0\nAGE                            0\nNEW_AGE_CAT_OLD                0\nNEW_AGE_CAT_YOUNG              0\nNEW_GLUCOSE_CAT_PREDIABETES    0\nNEW_BMI_RANGE_HEALTY           0\nNEW_BMI_RANGE_OVERWEIGHT       0\nNEW_BMI_RANGE_OBESE            0\nNEW_BLOODPRESSURE_HS1          0\nNEW_BLOODPRESSURE_HS2          0\ndtype: int64\n##################### Quantiles #####################\n                              0.00      0.05      0.50      0.95      0.99      1.00\nPREGNANCIES              -1.141852 -1.141852 -0.250952  1.827813  2.718712  3.906578\nGLUCOSE                  -3.783654 -1.311179 -0.121888  1.881130  2.350587  2.444478\nBLOODPRESSURE            -3.572597 -1.571894  0.149641  1.080200  1.907364  2.734528\nSKINTHICKNESS            -1.288212 -1.288212  0.154533  1.471822  1.931619  4.921866\nINSULIN                  -0.697537 -0.697537 -0.430388  1.868845  3.856259  5.718419\nBMI                      -4.060474 -1.293634  0.000942  1.574106  2.381820  4.455807\nDIABETESPEDIGREEFUNCTION -1.189553 -1.001249 -0.300128  1.996219  3.704036  5.883565\nAGE                      -1.041549 -1.041549 -0.360847  2.106697  2.872487  4.063716\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/2611075531.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '-439.5' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n","output_type":"stream"}]},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"markdown","source":"## <a class=\"anchor\" id=\"BaseModels\">Base Models</a>","metadata":{}},{"cell_type":"code","source":"def base_models(X, y, scoring=\"roc_auc\"):  \n    print(\"Base Models....\")  \n    classifiers = [('LR', LogisticRegression()),  \n                   ('KNN', KNeighborsClassifier()),  \n                   (\"SVC\", SVC()),  \n                   (\"CART\", DecisionTreeClassifier()),  \n                   (\"RF\", RandomForestClassifier()),  \n                   ('Adaboost', AdaBoostClassifier()),  \n                   ('GBM', GradientBoostingClassifier()),  \n                   ('XGBoost', XGBClassifier(use_label_encoder=False, eval_metric='logloss')),  \n                   ('LightGBM', LGBMClassifier(verbosity=-1)),  \n                   # ('CatBoost', CatBoostClassifier(verbose=False))  \n                   ]  \n  \n    for name, classifier in classifiers:  \n        cv_results = cross_validate(classifier, X, y, cv=3, scoring=scoring)  \n        print(f\"{scoring}: {round(cv_results['test_score'].mean(), 4)} ({name}) \")","metadata":{"execution":{"iopub.status.busy":"2024-07-13T22:26:44.094073Z","iopub.execute_input":"2024-07-13T22:26:44.094507Z","iopub.status.idle":"2024-07-13T22:26:44.106521Z","shell.execute_reply.started":"2024-07-13T22:26:44.094472Z","shell.execute_reply":"2024-07-13T22:26:44.105467Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"code","source":"base_models(X, y)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T22:26:47.825138Z","iopub.execute_input":"2024-07-13T22:26:47.825516Z","iopub.status.idle":"2024-07-13T22:26:49.950087Z","shell.execute_reply.started":"2024-07-13T22:26:47.825486Z","shell.execute_reply":"2024-07-13T22:26:49.948872Z"},"trusted":true},"execution_count":82,"outputs":[{"name":"stdout","text":"Base Models....\nroc_auc: 0.8411 (LR) \nroc_auc: 0.7808 (KNN) \nroc_auc: 0.8354 (SVC) \nroc_auc: 0.6467 (CART) \nroc_auc: 0.8238 (RF) \nroc_auc: 0.8178 (Adaboost) \nroc_auc: 0.8263 (GBM) \nroc_auc: 0.803 (XGBoost) \nroc_auc: 0.8015 (LightGBM) \n","output_type":"stream"}]},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"markdown","source":"## <a class=\"anchor\" id=\"AutomatedHyperparameterOptimization\">Automated Hyperparameter Optimization</a>","metadata":{}}]}